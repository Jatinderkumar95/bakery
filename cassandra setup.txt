Ensure you have installed the DataStax C# Driver via NuGet in your .NET project.

PM> Install-Package CassandraCSharpDriver

In Cassandra, you typically define a table with a primary key.  Here’s how the Book class might be represented:

CREATE TABLE books (
    id int PRIMARY KEY,
    title text,
    author text,
    description text,
    published_by text,
    publish_date timestamp,
    most_valued_book boolean,
    is_active boolean
);

New Mapper instances can be created each time they are needed, as short-lived instances, as long as you are reusing the same ISession instance and mapping configuration.
 When using parameters, use query markers (?) instead of hardcoded stringified values, this improves serialization performance and lower memory consumption.

The Mapper will create new instances of your classes using the parameter-less constructor.

Configuring mappings
In many scenarios, you need more control over how your class maps to a CQL table. You have two ways of configuring the Mapper:

decorate your classes with attributes
define mappings in code using the fluent interface

// All query methods (Fetch, Single, First, etc.) will auto generate
// the SELECT and FROM clauses if not specified.
IEnumerable<User> users = mapper.Fetch<User>();
IEnumerable<User> users = mapper.Fetch<User>("FROM users WHERE name = ?", someName);
IEnumerable<User> users = mapper.Fetch<User>("WHERE name = ?", someName);

// Single and SingleOrDefault for getting a single record 
var user = mapper.Single<User>("WHERE userid = ?", userId); 
var user = mapper.SingleOrDefault<User>("WHERE userid = ?", userId);

// First and FirstOrDefault for getting first record 
var user = mapper.First<User>("SELECT * FROM users"); 
var user = mapper.FirstOrDefault<User>("SELECT * FROM users");

// All query methods also support "flattening" to just the column's value type when 
// selecting a single column 
Guid userId = mapper.First<Guid>("SELECT userid FROM users"); 
IEnumerable<string> names = mapper.Fetch<string>("SELECT name FROM users");

// Insert a POCO var newUser = new User { UserId = Guid.NewGuid(), Name = "SomeNewUser" }; 
mapper.Insert(newUser);

// Update with POCO someUser.Name = "A new name!"; 
mapper.Update(someUser);

// Update with CQL (will prepend table name to CQL) 
mapper.Update<User>("SET name = ? WHERE id = ?", someNewName, userId);

// Delete with POCO 
mapper.Delete(someUser);

// Delete with CQL (will prepend table name to CQL) 
mapper.Delete<User>("WHERE id = ?", userId);


 A user-defined type simplifies handling a group of related properties.

A quick example is a user account table that contains address details described through a set of columns: street, city, zip code. With the addition of UDTs, you can define this group of properties as a type and access them as a single entity or separately.

User-defined types are declared at the keyspace level.

In your application, you can map your UDTs to application entities. For example, given the following UDT:

CREATE TYPE address (
   street text,
   city text,
   zip int,
   phones list<text>
);

You can also provide the keyspace when declaring a UDT. This is useful for these situations:

If the UDT is defined on a keyspace which is not the default - which can be set via Session.Connect(string) or Builder.WithDefaultKeyspace(string)
if you don’t declare a default keyspace with the methods mentioned above

Based on the previous example, let’s change the phones column from set<text> to a set<phone>, where phone contains an alias, a number and a country code.

Phone UDT
CREATE TYPE phone (
   alias text,
   number text,
   country_code int
);
CREATE TYPE address (
   street text,
   city text,
   zip_code int,
   phones list<phone>
);
session.UserDefinedTypes.Define(
   UdtMap.For<Phone>(),
   UdtMap.For<Address>()
);

INSERT INTO cycling.cyclist_stats (id, lastname, basics) VALUES (
  e7ae5cf3-d358-4d99-b900-85902fda9bb0, 
  'FRAME', 
  { birthday : '1993-06-18', nationality : 'New Zealand', weight : null, height : null }
);

ALTER TABLE xx.cmsresource ADD fastdeliverydescription text;

If you provide the whole object when inserting and updating entities, it is recommended to use frozen UDTs over non-frozen UDTs. If you are using Mapper or Linq2Cql, this is the case when you use Mapper.Insert<T>(T obj), Mapper.Update<T>(T obj) orTable<T>.Insert(T obj). The same applies to frozen collections over non-frozen collections.

Frozen collections and UDTs in Cassandra are serialized as a single cell value where non-frozen collections and UDTs serialize each individual element/field as a cell.

Methods like Mapper.Update<T>(T obj) provide the entire UDT or collection for an entity field value on each invocation, so it is more efficient to use frozen UDTs and collections when every update and insert is done this way.

Also, when using non-frozen collections, on INSERT Cassandra must create a tombstone to invalidate all existing collection elements, even if there are none. When using frozen collections, no such tombstone is needed.

See Freezing collection types for more information about frozen collections.

See Creating a user-defined type for more information about frozen UDTs.